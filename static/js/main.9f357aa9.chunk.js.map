{"version":3,"sources":["AppDispatcher.js","app/actions/ActionTypes.js","app/class/Emoji.js","app/Api.js","app/actions/EmojiActions.js","app/stores/EmojiStore.js","app/components/Filter.jsx","app/components/NotFound.jsx","app/components/Spinner.jsx","app/components/Emoji.jsx","app/components/Results.jsx","app/components/App.jsx","index.js"],"names":["Dispatcher","LOADED_EMOJI","Emoji","code","html_entity","image","name","unicode","this","json","map","entry","fetch","window","location","pathname","replace","then","response","EmojiActions","loadedEmoji","fromJson","load","Api","emoji","AppDispatcher","dispatch","type","ActionTypes","value","search","SEARCH","results","hasResults","state","action","length","filter","toLowerCase","indexOf","ReduceStore","Filter","props","isSearching","onChangeHandler","bind","onChangeTimeout","e","targetValue","target","clearTimeout","setTimeout","setState","className","onChange","placeholder","Component","NotFound","src","alt","Spinner","isCopied","handleClickToCopy","textarea","document","createElement","innerText","textContent","getElementsByTagName","append","select","execCommand","classList","add","remove","err","console","error","copyToClipboard","relativeImage","item","onClick","dangerouslySetInnerHTML","__html","PropTypes","instanceOf","EmojiObject","isRequired","Results","key","renderItems","App","EmojiStore","getState","recursive","hasMore","prev","slice","onEmojiStoreHandler","listener","addListener","ReactDOM","render","getElementById","packageJson","version"],"mappings":"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","file":"static/js/main.9f357aa9.chunk.js","sourcesContent":["import { Dispatcher } from 'flux';\n\nexport default new Dispatcher();\n","export default {\n    LOADED_EMOJI: 'LOADED_EMOJI',\n};\n","\nexport default class Emoji {\n\n    constructor({ code, html_entity, image, name, unicode }) {\n        this.code = code;\n        this.html_entity = html_entity;\n        this.image = image;\n        this.name = name;\n        this.unicode = unicode;\n    }\n\n    get relativeImage() {\n        return `emoji/${this.name}.png`;\n    }\n\n    static fromJson(json) {\n        const emoji = json.map((entry) => {\n            return new this(entry);\n        });\n\n        return emoji;\n    }\n\n}\n","import EmojiActions from './actions/EmojiActions';\nimport Emoji from './class/Emoji';\n\nclass Api {\n\n    load() {\n        fetch(`${window.location.pathname.replace(/\\/$/, '')}/emoji.json`)\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                EmojiActions.loadedEmoji(Emoji.fromJson(json));\n            })\n        ;\n    }\n\n}\n\nexport default new Api();\n","import AppDispatcher from '../../AppDispatcher';\nimport ActionTypes from './ActionTypes';\nimport Api from '../Api';\n\nexport default {\n    load() {\n        Api.load();\n    },\n    loadedEmoji(emoji) {\n        AppDispatcher.dispatch({\n            type: ActionTypes.LOADED_EMOJI,\n            value: emoji,\n        });\n    },\n    search(name) {\n        AppDispatcher.dispatch({\n            type: ActionTypes.SEARCH,\n            value: name,\n        });\n    },\n};\n","import { ReduceStore } from 'flux/utils';\nimport AppDispatcher from '../../AppDispatcher';\nimport ActionTypes from '../actions/ActionTypes';\n\nclass EmojiStore extends ReduceStore {\n    constructor() {\n        super(AppDispatcher);\n        this.results = [];\n    }\n\n    getInitialState() {\n        return {\n            results: [],\n            hasResults: null,\n        };\n    }\n\n    reduce(state, action) {\n        switch (action.type) {\n            case ActionTypes.LOADED_EMOJI:\n                this.results = action.value;\n                return {\n                    hasResults: this.results.length > 0,\n                    results: this.results,\n                };\n            case ActionTypes.SEARCH:\n                return {\n                    hasResults: this.results.length > 0,\n                    results: this.results.filter((emoji) => {\n                        return emoji.name.toLowerCase().indexOf(action.value.toLowerCase()) >= 0;\n                    }),\n                };\n            default:\n                return state;\n        }\n    }\n}\n\nexport default new EmojiStore();\n","import React, { Component } from 'react';\n\nimport EmojiActions from '../actions/EmojiActions';\n\nimport './Filter.css';\n\nclass Filter extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isSearching: false,\n        };\n\n        this.onChangeHandler = this.onChangeHandler.bind(this);\n        this.onChangeTimeout = null;\n    }\n\n    onChangeHandler(e) {\n        const targetValue = e.target.value;\n        clearTimeout(this.onChangeTimeout);\n        this.onChangeTimeout = setTimeout(() => {\n            EmojiActions.search(targetValue);\n        }, 500);\n\n        this.setState({\n            isSearching: targetValue.length > 0\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"Filter\">\n                <div className=\"container\">\n                    <input className={this.state.isSearching ? 'is-searching' : ''} onChange={this.onChangeHandler} placeholder=\"Search Emoji ..\" type=\"text\" />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Filter;\n","import React, { Component } from 'react';\n\nimport './Spinner.css';\n\nclass NotFound extends Component {\n\n    render() {\n        return (\n            <div className=\"Spinner\">\n                <img src=\"images/dizzy_face.png\" alt=\"no results\" />\n                <div className=\"text\">no results</div>\n            </div>\n        );\n    }\n\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\n\nimport './Spinner.css';\n\nclass Spinner extends Component {\n\n    render() {\n        return (\n            <div className=\"Spinner jump\">\n                <img src={`${window.location.pathname.replace(/\\/$/, '')}/images/smile.png`} alt=\"loading\" />\n                <div className=\"text\">loading</div>\n            </div>\n        );\n    }\n\n}\n\nexport default Spinner;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport EmojiObject from '../class/Emoji';\n\nimport './Emoji.css';\n\nclass Emoji extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCopied: false\n        };\n\n        this.handleClickToCopy = this.handleClickToCopy.bind(this);\n    }\n\n    static get propTypes() {\n        return {\n            item: PropTypes.instanceOf(EmojiObject).isRequired,\n        };\n    }\n\n    copyToClipboard(target) {\n        var textarea = document.createElement('textarea');\n        textarea.innerText = target.textContent;\n\n        document.getElementsByTagName('body')[0].append(textarea);\n        textarea.select();\n\n        try {\n            if (document.execCommand('copy')) {\n                target.classList.add('copied');\n            }\n\n            setTimeout(() => {\n                target.classList.remove('copied');\n            }, 2000);\n        } catch (err) {\n            console.error('Oops, unable to copy');\n        }\n\n        textarea.remove();\n    }\n\n    handleClickToCopy(e) {\n        this.copyToClipboard(e.target);\n    }\n\n    render() {\n        const relativeImage = `${window.location.pathname.replace(/\\/$/, '')}/${this.props.item.relativeImage}`;\n\n        return (\n            <div className={`Emoji ${ this.state.isCopied ? 'copied' : '' }`}>\n                <div className=\"image\"><img src={relativeImage} alt={this.props.item.name} /></div>\n                <div className=\"name\">{this.props.item.code}</div>\n                <div className=\"details\">\n                    <div className=\"image\"><img src={relativeImage} alt={this.props.item.name} /></div>\n                    <div className=\"name\" onClick={this.handleClickToCopy}>{this.props.item.code}</div>\n                    <div className=\"name char\">\n                        <div onClick={this.handleClickToCopy} className=\"column column-left\" dangerouslySetInnerHTML={{ __html: this.props.item.html_entity }}></div>\n                        <div onClick={this.handleClickToCopy} className=\"column column-right\">{this.props.item.html_entity}</div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Emoji;\n","import React, { Component } from 'react';\n\nimport NotFound from './NotFound';\nimport Spinner from './Spinner';\nimport Emoji from './Emoji';\n\nimport './Results.css';\n\nclass Results extends Component {\n\n    renderItems(hasResults, results) {\n        if (hasResults === true && results.length === 0) {\n            return <NotFound />;\n        }\n\n        return results.length > 0 ? results.map((item, key) => (\n            <Emoji key={key} item={item} />\n        )) : <Spinner />;\n    }\n\n    render() {\n        const {hasResults, results} = this.props\n        return (\n            <div className=\"Results container\">\n                {this.renderItems(hasResults, results)}\n            </div>\n        );\n    }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\n\nimport EmojiActions from '../actions/EmojiActions';\nimport EmojiStore from '../stores/EmojiStore';\n\nimport Filter from './Filter';\nimport Results from './Results';\n\nimport './App.css';\n\nclass App extends Component {\n\n    emoji = [];\n\n    state = {\n        emoji: EmojiStore.getState()\n    };\n\n    componentDidMount() {\n        EmojiActions.load();\n        this.listener = EmojiStore.addListener(this.onEmojiStoreHandler);\n    }\n\n    recursive = () => {\n        setTimeout(() => {\n            \n            let hasMore = this.state.emoji.results.length + 50 < this.emoji.results.length;\n            this.setState((prev, props) => ({\n                emoji: {\n                    ...prev.emoji,\n                    results: this.emoji.results.slice(0, prev.emoji.results.length + 50)\n                }\n            }));\n            if (hasMore) this.recursive();\n        }, 0);\n    }\n\n    componentWillUnmount() {\n        this.listener.remove();\n    }\n\n    onEmojiStoreHandler = () => {\n        // this.setState({\n        //     emoji: EmojiStore.getState()\n        // });\n        this.emoji = EmojiStore.getState();\n        this.recursive();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Filter {...this.state.emoji} />\n                <Results {...this.state.emoji} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/components/App';\n\nimport packageJson from '../package.json';\n\nimport './index.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\nReactDOM.render(\n    (\n        <div>\n            v {packageJson.version}\n        </div>\n    ),\n    document.getElementById('version')\n);\n"],"sourceRoot":""}